package net.emaze.dysfunctional.iterations;

import java.util.NoSuchElementException;
import net.emaze.dysfunctional.contracts.dbc;
import net.emaze.dysfunctional.dispatching.delegates.Delegate;
import net.emaze.dysfunctional.options.Box;
import net.emaze.dysfunctional.options.Maybe;

/**
 * An iterator generated by a function providing the next item or nothing when the iteration
 * should be completed.
 * The generation function initially is called providing the given seed item, after that 
 * it's called providing the previous generated item.
 */
public class IteratorGenerator<T> extends ReadOnlyIterator<T> {

    private final Delegate<Maybe<T>, T> generator;
    private final Box<T> next = Box.empty();
    private T current;
    private boolean active = true;

    public IteratorGenerator(T seed, Delegate<Maybe<T>, T> generator) {
        dbc.precondition(generator != null, "generator cannot be null");
        this.current = seed;
        this.generator = generator;
    }

    @Override
    public boolean hasNext() {
        return fetchNext();
    }

    @Override
    public T next() {
        if (!fetchNext()) {
            throw new NoSuchElementException("generation has been completed");
        }
        return next.unload().value();
    }

    private boolean fetchNext() {
        if (active && next.isEmpty()) {
            final Maybe<T> got = generator.perform(current);
            active = got.hasValue();
            if (active) {
                current = got.value();
                next.setContent(current);
            }
        }
        return active;
    }
}
